Habit Tracker Application - Detailed Logic and Code Overview with Code Snippets
1. Overview
The Habit Tracker application is a React-based frontend that enables users to create, manage, and track habits. This document will detail the logic and interconnections of the key components, along with code snippets to illustrate how everything works together.

2. Project Structure and Components
Key Components and Code Examples:

App.js

The entry point of the application, managing routing and global states like userType and isLoggedIn.
Example:
javascript
Copy code
function App() {
  const [userType, setUserType] = useState('new');
  const [isLoggedIn, setIsLoggedIn] = useState(false);

  useEffect(() => {
    const storedUserType = localStorage.getItem('userType');
    const token = localStorage.getItem('token');
    if (storedUserType) setUserType(storedUserType);
    if (token) setIsLoggedIn(true);
  }, []);

  return (
    <Router>
      <Routes>
        <Route path="/" element={<LandingPage />} />
        <Route path="/welcome" element={userType === 'new' ? <WelcomePage onGetStarted={handleGetStarted} onDemoClick={handleDemoClick} /> : <Navigate to="/dashboard" replace />} />
        <Route path="/dashboard" element={userType === 'demo' ? <PrefilledHabitTracker /> : (isLoggedIn ? <HabitTracker /> : <Navigate to="/login" replace />)} />
        <Route path="/login" element={isLoggedIn ? <Navigate to="/dashboard" replace /> : <Login setIsLoggedIn={setIsLoggedIn} setUserType={setUserType} />} />
        <Route path="/signup" element={isLoggedIn ? <Navigate to="/dashboard" replace /> : <Signup setIsLoggedIn={setIsLoggedIn} setUserType={setUserType} />} />
      </Routes>
    </Router>
  );
}
How It Works: App.js initializes the application, manages global states, and sets up the routing system. The user type and authentication status determine the initial screen the user sees.
LandingPage.js

The homepage component with a dark mode toggle and navigation options.
Example:
javascript
Copy code
const LandingPage = () => {
  const [isDarkMode, setIsDarkMode] = useState(true);

  const toggleDarkMode = () => {
    setIsDarkMode(!isDarkMode);
  };

  return (
    <div className={`min-h-screen ${isDarkMode ? 'bg-gray-900 text-white' : 'bg-gray-100 text-gray-900'} transition-colors duration-300`}>
      <header className="container mx-auto px-4 py-6">
        <div className="flex justify-between items-center">
          <div className="text-3xl font-bold">HabitTracker</div>
          <nav className="hidden md:block">
            <ul className="flex space-x-8">
              <li><a href="#features" className="hover:text-purple-400">Features</a></li>
              <li><a href="#about" className="hover:text-purple-400">About</a></li>
              <li><a href="#testimonials" className="hover:text-purple-400">Testimonials</a></li>
              <li><Link to="/login" className="bg-purple-600 px-6 py-2 rounded-full">Login</Link></li>
            </ul>
          </nav>
          <div className="flex items-center space-x-4">
            <button onClick={toggleDarkMode} className="p-2 rounded-full bg-gray-800">
              {isDarkMode ? <Sun className="text-yellow-400" /> : <Moon className="text-gray-800" />}
            </button>
          </div>
        </div>
      </header>
    </div>
  );
}
How It Works: LandingPage.js handles the UI of the homepage, allowing users to navigate through the application and toggle between dark and light modes.
HabitTracker.js

The central component managing the main habit tracking functionality.
Example:
javascript
Copy code
const HabitTracker = () => {
  const [areas, setAreas] = useState([]);
  const [selectedSection, setSelectedSection] = useState('all');
  const [selectedHabit, setSelectedHabit] = useState(null);
  const [isRightPanelOpen, setIsRightPanelOpen] = useState(false);

  useEffect(() => {
    loadData(); // Fetches habits and areas from the API
  }, []);

  return (
    <div className="bg-gray-900 text-white min-h-screen flex">
      <Sidebar 
        areas={areas} 
        setAreas={setAreas}
        selectedSection={selectedSection}
        setSelectedSection={setSelectedSection}
      />
      <MainContent 
        areas={areas}
        selectedSection={selectedSection}
        setSelectedHabit={setSelectedHabit}
        setIsRightPanelOpen={setIsRightPanelOpen}
      />
      {isRightPanelOpen && selectedHabit && (
        <RightPanel 
          habit={selectedHabit} 
          onClose={() => {
            setIsRightPanelOpen(false);
            setSelectedHabit(null);
          }} 
        />
      )}
    </div>
  );
}
How It Works: HabitTracker.js ties together the main functionality of habit tracking. It manages state for areas, habits, and UI interactions, and coordinates with Sidebar, MainContent, and RightPanel components.
Sidebar.js

Displays the list of areas and allows the user to add new areas or view all habits.
Example:
javascript
Copy code
const Sidebar = ({ areas, setAreas, selectedSection, setSelectedSection, onAddArea }) => {
  const [newAreaInput, setNewAreaInput] = useState('');

  const handleNewArea = () => {
    if (newAreaInput.trim()) {
      onAddArea({ name: newAreaInput.trim() });
      setNewAreaInput('');
    }
  };

  return (
    <div className="w-64 bg-gray-800 p-4 flex flex-col h-screen">
      <div className="flex items-center mb-6">
        <span className="font-semibold">All Habits</span>
      </div>
      <div className="mb-6 flex-grow">
        <h3 className="text-xs font-semibold text-gray-400 mb-2">AREAS</h3>
        {areas.map(area => (
          <div key={area._id} onClick={() => setSelectedSection(area._id)}>
            <span>{area.name}</span>
          </div>
        ))}
        <div>
          <input value={newAreaInput} onChange={e => setNewAreaInput(e.target.value)} placeholder="New area name" />
          <button onClick={handleNewArea}>Add</button>
        </div>
      </div>
    </div>
  );
}
How It Works: The Sidebar.js component allows users to navigate between different areas of habits and to add new areas. It communicates with the parent HabitTracker.js to manage selected sections and area-related actions.
MainContent.js

Displays the list of habits based on the selected area or all habits.
Example:
javascript
Copy code
const MainContent = ({ areas, selectedSection, setSelectedHabit, setIsRightPanelOpen }) => {
  const habits = selectedSection === 'all' ? areas.flatMap(area => area.habits) : areas.find(area => area._id === selectedSection)?.habits || [];

  return (
    <div className="flex-1 p-4">
      {habits.map(habit => (
        <div key={habit.id} onClick={() => {
          setSelectedHabit(habit);
          setIsRightPanelOpen(true);
        }}>
          <span>{habit.name}</span>
        </div>
      ))}
    </div>
  );
}
How It Works: MainContent.js filters and displays habits based on the selected area or shows all habits if no specific area is selected. It passes the selected habit to RightPanel for detailed viewing.
RightPanel.js

Shows detailed information about a selected habit, including progress and streaks.
Example:
javascript
Copy code
const RightPanel = ({ habit, onClose, onEdit }) => {
  const progress = calculateProgress(habit);

  return (
    <div className="w-1/3 bg-gray-800 p-3 fixed right-0 top-0 shadow-lg">
      <div className="flex justify-between items-center">
        <h2>{habit.name}</h2>
        <button onClick={onClose}><X size={16} /></button>
      </div>
      <div>
        <h3>Progress</h3>
        <div className="w-full bg-gray-600 rounded-full h-2">
          <div className="bg-blue-600 h-2 rounded-full" style={{ width: `${progress}%` }}></div>
        </div>
      </div>
    </div>
  );
}
How It Works: RightPanel.js shows detailed statistics about the selected habit. It uses utility functions from habitUtils.js to calculate progress and display it visually.
habitUtils.js

Provides utility functions for habit management, like calculating streaks and progress.
Example:
javascript
Copy code
export const calculateProgress = (habit) => {
  const completeDays = habit.log?.filter(entry => entry.completed).length || 0;
  const progress = (completeDays / habit.goal.value) * 100;
  return Math.min(progress, 100);
};
How It Works: habitUtils.js contains essential logic for processing habit data, such as calculating progress, streaks, and determining the status of a habit on a particular day.
api.js

Handles all interactions with the backend API, including authentication and CRUD operations.
Example:
javascript
Copy code
export const fetchHabits = async () => {
  try {
    const response = await api.get('/habits');
    return Array.isArray(response.data) ? response.data : [];
  } catch (error) {
    console.error('Error fetching habits:', error);
    throw error;
  }
};
How It Works: api.js defines functions for interacting with the backend, including fetching, creating, updating, and deleting habits and areas. It uses Axios for making HTTP requests and includes interceptors for handling authentication tokens.
3. Interconnections and Flow
Example Flow: Adding a New Habit

User Interaction: The user clicks "Add Habit" in the UI, which opens AddHabitModal.js.
Data Handling: The user fills in habit details and submits the form, triggering a call to onAddHabit in HabitTracker.js.
API Interaction: onAddHabit calls createHabit from api.js, which sends a POST request to the backend to store the new habit.
State Update: Upon successful creation, the new habit is added to the local state in HabitTracker.js, which causes the UI to update and display the new habit in MainContent.js.
Example Flow: Viewing Habit Details

User Interaction: The user clicks on a habit in MainContent.js.
State Update: setSelectedHabit is called, and isRightPanelOpen is set to true.
Detailed View: RightPanel.js opens, displaying detailed information about the selected habit, including progress calculated by calculateProgress from habitUtils.js.
4. Conclusion
This document provides a comprehensive overview of the Habit Tracker application with detailed code snippets and explanations of how components are interconnected. 
